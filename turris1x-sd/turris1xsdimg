#!/bin/bash
#
## Copyright (C) 2025 CZ.NIC z.s.p.o. (http://www.nic.cz/)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
set -ueo pipefail

medkit="turris1x-medkit-latest.tar.gz"
branch="hbk"

usage() {
    echo "Usage: $0 [-d|--distimage] <PATH>"
    echo ""
    echo "This script formats an SD card and writes a complete image to it."
    echo ""
    echo "Alternatively (with -d) it generates a 512MB SD image that"
    echo "expands itself to whole SD card on first boot."
    echo ""
    echo "Examples:"
    echo "    $0 /dev/mmcblk0"
    echo "    $0 -d ~/turris1x-sd.img"
}

die() {
    echo "$1" >&2
    exit 1
}

are_you_sure() {
    local answer
    local question="Are you sure you want to lose everything on $SDCARD? (yes/No): "
    read -r -p "$question" answer
    case "$(echo "$answer" | awk '{ print tolower($0) }')" in
        y|yes)
            return 0
            ;;
        ""|n|no)
            echo "No change was performed. Exiting." >&2
            exit 0
            ;;
        *)
            die "Unknown answer: $answer"
            ;;
    esac
}

make_image() {
    dd if=/dev/zero of=$FILEPATH bs=1M count=512
    losetup -P /dev/loop5 $FILEPATH || die "Cannot open loop device"
    LOSETUP=1
    SDCARD="/dev/loop5"
}

# Formant and setup partition on SD card
format_sdcard() {
    trap clean EXIT
    dd if=/dev/zero of="$SDCARD" bs=10M count=11
    { fdisk "$SDCARD" <<EOF
o
n
p
1
16384

a
w
EOF
    } || true
    # ^ sometimes complains when doing this on loop devices
    sync
    partprobe
    # rewrite to fdisk -l
    find_sdcardp
    mkfs.btrfs -L turris-rootfs -f "${SDCARDP}1" || die "Can't format btrfs partition!"
    ROOT_UUID="$(blkid "${SDCARDP}1" | sed -n 's|^/dev/.*UUID="\([0-9a-fA-F-]*\)".*|\1|p')"
}

# Find how are the partitions marked
find_sdcardp() {
    set +e
        SDCARDP=$SDCARD
    ls "${SDCARD}p1" >/dev/null 2>/dev/null
    if [ $? -eq 0 ] || [ -n "$DIST" ]; then
        SDCARDP="${SDCARD}p"
    fi
    set -e
}

clean() (
    # Note: we use here rmdir to not recursivelly remove mounted FS if umount fails.
    set +e # just to continue if unmount fails with another umount
    #umount "$TMPDIR/target/@/boot/tefi"
    umount "$TMPDIR/target"
    [ -n "$LOSETUP" ] && losetup -d /dev/loop5
    rmdir "$TMPDIR/target"
    rmdir "$TMPDIR/src"
    rm $medkit
    rm turris1x-uboot-sdcard.bin
)

uboot_flash() {
    wget https://repo.turris.cz/turris1x-uboot-sdcard.bin || die "Can't download u-boot"
    dd if=turris1x-uboot-sdcard.bin of="$SDCARD" bs=1 count=176 conv=notrunc
    dd if=turris1x-uboot-sdcard.bin of="$SDCARD" bs=1 seek=1048576 skip=512 conv=notrunc

    printf '\x00' | sudo dd of="$SDCARD" bs=1 seek=$((0x52)) count=1 conv=notrunc
    printf '\x10' | sudo dd of="$SDCARD" bs=1 seek=$((0x51)) count=1 conv=notrunc
}

# Copy current root to SD card
migrate_to_sdcard() {
    TMPDIR="$(mktemp -d)"
    trap clean EXIT

    uboot_flash

    mkdir -p "$TMPDIR/target"
    mkdir -p "$TMPDIR/src"

    # import factory image - best effort, proceed even if it fails
    mount "${SDCARDP}1" "$TMPDIR/target" || die "Can't mount ${SDCARDP}1"
    btrfs subvolume create "$TMPDIR/target/@factory" || die "Can't create factory subvolume!"
    wget https://repo.turris.cz/$branch/medkit/$medkit || die "Can't download medkit"
    wget -O - https://repo.turris.cz/$branch/medkit/$medkit.sha256 | sha256sum -c - || die "Can't verify medkit integrity"
    tar -C "$TMPDIR/target/@factory" -xzf $medkit  || echo "Creating factory snapshot failed" >&2
    # copy enlarge script into uci-defaults
    # executes only on first startup
    [ -n "$DIST" ] && cp 00-migrate-resize $TMPDIR/target/@factory/etc/uci-defaults

    btrfs subvolume snapshot "$TMPDIR/target/@factory" "$TMPDIR/target/@"
 
    ln -s "@/boot/boot.scr" "$TMPDIR/target/boot.scr"

    trap "" EXIT
    clean
}


##################################################################################

DIST=""
FILEPATH=""
LOSETUP=""
while [ $# -gt 0 ]; do
    case "$1" in
        -d|--distimage)
            DIST=1
        shift
            ;;
        -*)
            usage
            exit 0
            ;;
        *)
            FILEPATH="$1"
            shift
            ;;
    esac
done

[ -n "$FILEPATH" ] || die "No file/device provided"

if [ -n "$DIST" ]; then
    make_image
else
    SDCARD=$FILEPATH
    are_you_sure
fi

format_sdcard
migrate_to_sdcard


echo "root UUID = ${ROOT_UUID}"
echo "Image successfully written!" >&2
